# go-cli
# Copyright (C) 2023 THE 1.1.12'S COPYRIGHT HOLDER
# This file is distributed under the same license as the github.com/xuender/go-cli package.
# xuender <xuender@gmail.com>, 2023.
#
msgid ""
msgstr ""
"Project-Id-Version: 1.1.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-13 15:06+0800\n"
"PO-Revision-Date: 2023-07-13 15:16+0800\n"
"Last-Translator: ender <xuender@139.com>\n"
"Language-Team: ender <xuender@139.com>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.0.1\n"

#: cmd/root.go:18
msgid "CLI tool for Golang"
msgstr "Go 语言命令行工具"

#: cmd/root.go:19
msgid ""
"CLI tool for Golang\n"
"\n"
"  Generate structures, tests, examples, initialize projects, etc.\n\n\t\t%s"
msgstr ""
"Go 语言命令行工具\n"
"\n"
"  生成结构、测试、例子，初始化项目等。\n\n\t\t%s"

#: cmd/root.go:23
msgid "select language: en, zh"
msgstr "选择语言: 英语(en_US), 中文(zh_CN)"

#: cmd/root.go:24
msgid "Debug mode, display debug log"
msgstr "调试模式，显示调试日志"

#: cmd/root.go:27
msgid "set debug: %v"
msgstr "设置调试模式: %v"

#: cmd/root.go:34
#, c-format
msgid "set language: %s"
msgstr "设置语言: %s"

#: cmd/template.go:13
msgid "Create templates"
msgstr "创建模板"

#: cmd/template.go:14
#, c-format
msgid "Create templates to %s"
msgstr "创建模板: %s"

#: cmd/template.go:16 cmd/template.go:18 cmd/template.go:20 cmd/template.go:22
#, c-format
msgid "create %s templates."
msgstr "创建: %s 模板."

#: generate/cmd.go:18
msgid "Select type cobra or flag"
msgstr "选择 cobra 或 flag"

#: generate/cmd.go:19
msgid "Generate cmd"
msgstr "生成命令"

#: generate/cmd.go:20
msgid "Generate command support cobra and flag."
msgstr "生成命令，支持 cobra 和 flag。"

#: generate/cmd.go:22
msgid ""
"  # Create cmd\n"
"  go-cli g c cmd\n"
"  # Create cobra\n"
"  go-cli g c cmd -t cobra"
msgstr ""
"  # 生成命令\n"
"  go-cli g c cmd\n"
"  # 生成 cobra 命令\n"
"  go-cli g c cmd -t cobra"

#: generate/cmd.go:66 generate/interface.go:54
#, c-format
msgid "exist: %s"
msgstr "已经存在: %s"

#: generate/cmd.go:71
#, c-format
msgid "create cmd: %s"
msgstr "创建命令: %s"

#: generate/example.go:16
msgid "Generate example"
msgstr "生成例子"

#: generate/example.go:17
msgid "Generate test examples for exposed functions in file or directory."
msgstr "生成文件或目录中公开函数的测试或例子"

#: generate/example.go:18
msgid ""
"  # Create example\n"
"  go-cli g e pkg/source.go"
msgstr ""
"  # 生成例子\n"
"  go-cli g e pkg/source.go"

#: generate/interface.go:17
msgid "Generate interface"
msgstr "生成接口"

#: generate/interface.go:18
msgid "Generate interface and comments."
msgstr "生成接口和注释。"

#: generate/interface.go:19
msgid ""
"  # Create interface\n"
"  go-cli g i Book"
msgstr ""
"  # 生成接口\n"
"  go-cli g i Book"

#: generate/interface.go:44
#, c-format
msgid "create %s: %s"
msgstr "创建 %s: %s"

#: generate/proto.go:19
msgid "Select type message or enum"
msgstr "选择类型消息(message)或枚举(enum)"

#: generate/proto.go:20
msgid "Generate protobuf"
msgstr "生成 protobuf"

#: generate/proto.go:21
msgid "Generate protobuf and comments."
msgstr "生成 protobuf."

#: generate/proto.go:23
msgid ""
"  # Create message\n"
"  go-cli g p pb/Book\n"
"  # Create enum\n"
"  go-cli g p BookType -t enum -o pb/book.proto"
msgstr ""
"  # 生成消息\n"
"  go-cli g p pb/Book\n"
"  # create enum\n"
"  go-cli g p BookType -t enum -o pb/book.proto"

#: generate/proto.go:48
#, c-format
msgid "create Proto: %s"
msgstr "创建结构: %s"

#: generate/root.go:26
msgid "Generate source code"
msgstr "生成源代码"

#: generate/root.go:27
msgid ""
"Generate source code.\n"
"\n"
"Including commands, tests, examples, struct, interface, protobuf, etc."
msgstr ""
"生成源代码。\n"
"\n"
"包括命令、测试、例子、结构、接口、protobuf等。"

#: generate/root.go:29
msgid "Output file"
msgstr "输出文件"

#: generate/struct.go:11
msgid "Generate struct"
msgstr "生成结构"

#: generate/struct.go:12
msgid "Generate struct and new function."
msgstr "生成结构和新建函数。"

#: generate/struct.go:13
msgid ""
"  # Create struct\n"
"  go-cli g s Book"
msgstr ""
"  # 生成结构\n"
"  go-cli g s Book"

#: generate/test.go:18
msgid "Generate test"
msgstr "生成测试"

#: generate/test.go:19
msgid "Generating unit tests for exposed functions in file or directory."
msgstr "根据目录或文件中的公开函数生成单元测试。"

#: generate/test.go:20
msgid ""
"  # Create test\n"
"  go-cli g t pkg/source.go\n"
"  # Create path\n"
"  go-cli g t pkg"
msgstr ""
"  # 生成测试\n"
"  go-cli g t pkg/source.go\n"
"  # 根据目录生成\n"
"  go-cli g t pkg"

#: generate/test.go:61
#, c-format
msgid "create test: %s"
msgstr "创建测试: %s"

#: generate/test.go:64
#, c-format
msgid "not found: %s"
msgstr "未找到: %s"

#: generate/test.go:100
#, c-format
msgid "create: %s %s"
msgstr "创建: %s %s"

#: initialization/gitee.go:14
msgid "Init gitee config"
msgstr "初始化 gitee.com 配置"

#: initialization/gitee.go:15
msgid "Initialize the gitee configuration files."
msgstr "初始化 gitee.com 配置文件。"

#: initialization/github.go:14
msgid "Init github config"
msgstr "初始化  github.com 配置"

#: initialization/github.go:15
msgid "Initialize the github configuration files."
msgstr "初始化 github.com 配置文件。"

#: initialization/root.go:26
msgid "Init Golang project"
msgstr "初始化Go语言项目"

#: initialization/root.go:27
msgid "Initialize the Golang project and create default configuration files."
msgstr "初始化go语言项目并创建默认配置文件。"

#: initialization/root.go:28
msgid ""
"  # Init project\n"
"  go-cli init\n"
"  # Init github config\n"
" go-cli init github"
msgstr ""
"  # 初始化项目\n"
"  go-cli init\n"
"  # 初始化 github 配置\n"
"  go-cli init github"

#: initialization/root.go:30
msgid "license: APACHE2, BSD3, MIT"
msgstr "许可协议：APACHE2、BSD3、MIT"

#: initialization/root.go:45
#, c-format
msgid "init: %s"
msgstr "初始化: %s"

#: initialization/root.go:48
#, c-format
msgid "dir is not exist: %s"
msgstr "目录不存在: %s"

#: initialization/root.go:75 initialization/root.go:87
#: initialization/utils.go:36
#, c-format
msgid "init file %s"
msgstr "初始化文件 %s"

#: initialization/utils.go:26
#, c-format
msgid "init dir: %s"
msgstr "初始化目录: %s"

#: structs/convert.go:19
#, fuzzy
#| msgid "Generate struct"
msgid "Convert struct"
msgstr "生成结构"

#: structs/convert.go:20
msgid "Convert struct to other structs."
msgstr "将结构转换为其他结构。"

#: structs/convert.go:58 structs/new.go:55
msgid "no duplicate name field"
msgstr "无重复字段"

#: structs/convert.go:85 structs/convert.go:105 structs/new.go:73
#, c-format
msgid "create function %s"
msgstr "创建函数: %s"

#: structs/new.go:18
#, fuzzy
#| msgid "Generate struct"
msgid "New struct"
msgstr "生成结构"

#: structs/new.go:19
msgid "Create a new struct function by other struct."
msgstr "通过其他结构创建一个新的结构。"

#: structs/new.go:86
#, c-format
msgid "Golang source file %s struct num is not one."
msgstr "Golang源程序 %s 结构号不是一。"

#: structs/root.go:9
msgid "Struct related"
msgstr "结构相关"

#: structs/root.go:10
msgid "Struct related commands."
msgstr "与结构相关的命令。"

#: watch/root.go:14
msgid "Watch and Run"
msgstr "监听并运行"

#: watch/root.go:15
msgid ""
"Watch to the directory and run a command. If the directory is modified, "
"restart the command."
msgstr "监听目录并运行命令。如果目录已修改，请重新启动该命令。"

#: watch/root.go:16
msgid ""
"  # Watch dir\n"
"  go-cli watch [command]"
msgstr ""
"  # 监听目录并运行\n"
"  go-cli watch [命令]"

#: watch/root.go:18
msgid "watch path, default is current directory"
msgstr "监视路径，默认为当前目录"
